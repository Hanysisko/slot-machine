{"version":3,"sources":["components/SquaresGrid/SquaresGrid.component.jsx","components/PlayInput/PlayInput.component.jsx","components/MyStats/MyStats.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SquaresGrid","props","id","style","background","colorsprop","className","PlayInput","type","placeholder","onChange","inputprop","onClick","buttonprop","MyStats","walletprop","lastgamescoreprop","statsprop","App","handleChange","e","setState","bidInput","target","value","checkCanPlay","state","wallet","drawResult","options","colorsNew","i","length","push","Math","floor","random","changeWallet","isNaN","console","log","Error","walletValue","showGameStats","games","gameHistory","wins","filter","result","win","losses","gameScore","showLastGameStats","at","lastGameScore","moneyWonInGame","bid","startGame","alert","colorsCurrentGame","addGameToStats","checkWin","colors","winMultiplier","draw","gameResult","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b09cf0bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../SquaresGrid/SquaresGrid.styles.css';\r\n\r\nexport const SquaresGrid = props => (\r\n\r\n    <div id=\"squaregrid\">\r\n      <div style={{background: props.colorsprop[0]}} className=\"square\"></div>\r\n      <div style={{background: props.colorsprop[1]}} className=\"square\"></div>\r\n      <div style={{background: props.colorsprop[2]}} className=\"square\"></div>\r\n    </div>\r\n\r\n);","import React from \"react\";\r\nimport '../PlayInput/PlayInput.styles.css';\r\n\r\nexport const PlayInput = props => (\r\n\r\n      <div id=\"inputgrid\">\r\n        \r\n        <input \r\n          type=\"number\" \r\n          placeholder=\"enter bid...\" \r\n          id=\"bid\" \r\n          onChange={ props.inputprop }\r\n        />\r\n\r\n        <button \r\n          id=\"gamestart\" \r\n          onClick={props.buttonprop}\r\n        >PLAY!</button>\r\n        \r\n      </div>\r\n\r\n)","import React from \"react\";\r\nimport '../MyStats/MyStats.styles.css';\r\n\r\nexport const MyStats = props => (\r\n\r\n  <div id=\"resultgrid\">\r\n    <div>Your money: {props.walletprop} $</div>\r\n    <div>{props.lastgamescoreprop}</div>\r\n    You played {props.statsprop[0]} times, \r\n    you won {props.statsprop[1]} times \r\n    and lost {props.statsprop[2]} times\r\n  </div>\r\n\r\n);","import React, { Component } from 'react';\nimport { SquaresGrid } from './components/SquaresGrid/SquaresGrid.component.jsx';\nimport { PlayInput } from './components/PlayInput/PlayInput.component.jsx';\nimport { MyStats } from './components/MyStats/MyStats.component.jsx'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      //SET YOUR START MONEY AND WIN MULTIPLIER\n      wallet: 100,\n      winMultiplier: 3,\n\n      colors: ['#666','#666','#666'],\n      bidInput: '',\n      gameHistory: [],\n\n      lastGameScore: 'Good luck!',\n      gameScore: [0,0,0]\n    }\n  }\n\n\n  //loading bid into state\n  handleChange = (e) => {\n    this.setState({ bidInput : e.target.value });\n  }\n\n\n  //checking if player can still play\n  checkCanPlay = (value) => {\n    if(this.state.wallet >= value) return true;\n    return false;\n  }\n\n  //spin the wheel, yay!\n  drawResult = () => {\n    let options = ['darkred', 'darkblue', 'darkgreen'];\n    let colorsNew = [];\n    for(var i=0; i<=options.length-1; i++){\n      colorsNew.push(options[Math.floor(Math.random() * 3)]);\n    };\n    return colorsNew;\n  }\n\n\n  //checking if we meet win conditions\n  checkWin(draw){\n    if((draw[0] === draw[1] && draw[1] === draw[2])||(draw[0] !== draw[1] && draw[1] !== draw[2] && draw[2] !== draw[0])) return true;\n    else return false;\n  }\n\n  //adding last game result to gameHistory\n  addGameToStats(win, bid) {\n    let gameResult = {\n      win: win,\n      bid: bid\n    }\n\n    this.state.gameHistory.push(gameResult);\n  }\n\n\n  //changing wallet; with additional error protection\n  changeWallet = (value, type = \"+\") => {\n    if(typeof value === \"number\" && !isNaN(value)){\n      let walletValue = this.state.wallet;\n      if(type === \"+\"){\n        return this.setState({wallet: walletValue += value});\n      } else if (type === \"-\"){\n        return this.setState({wallet: walletValue -= value})\n      } else {\n        throw new Error(\"u stupid - wrong type\")\n      }\n\n    } else {\n\n      console.log(typeof value);\n      throw new Error(\"u stupid - dis not a number\");\n    };\n\n  }\n\n\n  //how much did we won from our bid\n  moneyWonInGame(result, bid) {\n    const winMultiplier = this.state.winMultiplier;\n    if (result) return (winMultiplier * bid);\n    else return 0;\n  }\n\n\n  //checking how many times we play/won/lost\n  showGameStats = () => {\n    let games = this.state.gameHistory.length;\n    let wins = this.state.gameHistory.filter(result => result.win).length;\n    let losses = this.state.gameHistory.filter(result => !result.win).length;\n    \n    this.setState({gameScore:[games,wins,losses]});\n  }\n\n\n  //last game result in form of small message\n  showLastGameStats = () => {\n    if(this.state.gameHistory.at(-1).win) {\n      this.setState({lastGameScore:`You won ${this.moneyWonInGame(this.state.gameHistory.at(-1).win,this.state.gameHistory.at(-1).bid)} $!`})\n    } else {\n      this.setState({lastGameScore:`You lost ${this.state.gameHistory.at(-1).bid} $ :(`})\n    }\n  }\n\n  \n  // MAIN FUNCTION - 'GAME ENGINE'\n  startGame = () => {\n    \n    //error protection - check if (bid > 1) || (bid <= wallet)\n    if(this.state.bidInput < 1) return alert(\"bruh, that ain't even money\");\n    const bid = Math.floor(this.state.bidInput);\n    if(!this.checkCanPlay(bid)) return alert('nah, u broke');\n\n    //game 'spins' and saves results\n    const colorsCurrentGame = this.drawResult();\n    this.addGameToStats(this.checkWin(colorsCurrentGame), this.state.bidInput);\n\n    //changing wallet\n    if(this.checkWin(colorsCurrentGame)){\n      this.changeWallet(this.moneyWonInGame(this.state.gameHistory.at(-1).win, this.state.gameHistory.at(-1).bid),\"+\")\n    } else {\n      this.changeWallet(bid,\"-\")\n    };\n\n    //rendering colors and stats\n    this.setState({colors:colorsCurrentGame});\n    this.showLastGameStats();\n    this.showGameStats();\n  }\n\n  \n  render() {\n\n    return (\n      <div className=\"App\">\n        \n        <h1>SLOT MACHINE</h1>\n        <p>You win when you see 1 color or all 3 colors. Bet how much you want and play!</p>\n\n        <SquaresGrid\n          colorsprop={this.state.colors}\n        />\n\n        <PlayInput\n          inputprop = {this.handleChange}\n          buttonprop = {this.startGame}\n        />\n\n        <MyStats \n          walletprop={this.state.wallet}\n          lastgamescoreprop={this.state.lastGameScore}\n          statsprop={this.state.gameScore}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n\n      <App/>\n      {/* <div id=\"squaregrid\">\n        <div class=\"square\" id=\"square1\"></div>\n        <div class=\"square\" id=\"square2\"></div>\n        <div class=\"square\" id=\"square3\"></div>\n      </div> */}\n\n      {/* <div id=\"inputgrid\">\n        <input type=\"number\" placeholder=\"enter bid...\" id=\"bid\"/>\n        <button id=\"gamestart\">PLAY!</button>\n      </div>\n\n      <div>Your money: <span class=\"wallet\">X</span> $</div>\n\n      <div id=\"resultgrid\"> \n        <span class=\"result\"></span>\n        You played \n        <span class=\"number\"> 0 </span> times, you won\n        <span class=\"win\"> 0 </span> times and lost\n        <span class=\"loss\"> 0 </span> times\n      </div> */}\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}